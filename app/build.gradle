apply plugin: 'com.android.application'
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


android {

    //加载资源
    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
    properties.load(inputStream)
    //读取文件
    def sdkDir = properties.getProperty('keystore.path')
    //读取字段
    def keyfile = file(sdkDir)
    def key_keyAlias = properties.getProperty('keyAlias')
    def key_keyPassword = properties.getProperty('keyPassword')
    def key_storePassword = properties.getProperty('storePassword')

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.interview.interview"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        flavorDimensions "app"
    }

    signingConfigs {
        config {
            storeFile keyfile
            storePassword key_storePassword
            keyAlias key_keyAlias
            keyPassword key_keyPassword
        }
    }

    // 多渠道/多环境 的不同配置
    productFlavors {


        SatayKing {
            //此处的常量都会通过Gradle 在 BuildConfig.java 文件中生成 ， 你可以直接在Class中使用 BuildConfig.XXXX 进行使用
            // 每个环境包名不同
            applicationId "com.ablegenius.member.satayking"
            // 动态添加 string.xml 字段；
            // 注意，如果在这添加，在 string.xml 不能有这个字段，会重名！！！这里使用资源文件覆盖的方式来处理应用名称
//            resValue "string", "app_name", "沙嗲王會員x"
            resValue "bool", "auto_updates", 'false'
            // 动态修改 常量 字段
            buildConfigField "String", "MAIN_H5_URL", '"https://xxxxxxx22/index.html"'
            //服務器請求地址
            buildConfigField "String", "SERVER_URL", '"https://cloudxxxx22/a"'
            //一些常量
            buildConfigField "String", "company", '"SatayKing"'
            buildConfigField "String", "serial", '"xxxxx"'
            buildConfigField "int", "ENVIRONMENTInt", '2'
            // 修改 AndroidManifest.xml 里渠道变量
            manifestPlaceholders = [CHANNEL_VALUE: "SatayKing"
                                    , app_icon   : "@mipmap/ic_launcher_shadiewang",
                                    //此方式可直接在 manifest 中通过 ${icon} 进行占位引用； 或者在main同级中创建不同渠道后创建 res 资源文件
                                    icon         : "@mipmap/ic_launcher_shadiewang",
                                    //极光相关
                                    JPUSH_PKGNAME: applicationId,
                                    JPUSH_APPKEY : "xxxxxxx", //JPush上注册的包名对应的appkey.
                                    JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
                                    //Google Map 相关
                                    GoogleMapKey : "AIzaSyCLJ9Gng-xxxxx",

            ]

        }

        WineverHK {

            dimension "app"

            applicationId "com.ablegenius.member.wineverzhudi"

//            resValue "string", "app_name", "築地日本料理"
            resValue "bool", "auto_updates", 'true'
            resValue "drawable", "isrRank", 'true'

            buildConfigField "String", "MAIN_H5_URL", '"http://xxxxindex.html"'
            buildConfigField "String", "SERVER_URL", '"http://cloud.xxxx/a"'

            buildConfigField "String", "company", '"WineverHK"'
            buildConfigField "String", "serial", '"xxxx"'


            manifestPlaceholders = [CHANNEL_VALUE: "WineverHK"
                                    , app_icon   : "@mipmap/ic_launcher_zhudi",
                                    icon         : "@mipmap/ic_launcher_zhudi",

                                    JPUSH_PKGNAME: applicationId,
                                    JPUSH_APPKEY : "247aef555a20e8836d1ac361", //JPush上注册的包名对应的appkey.
                                    JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.

                                    GoogleMapKey : "AIzaSyCtAVjIVmGdnP44W2Nk8DjCT_OJISYUVxA",
            ]
        }


    }


    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    implementation 'top.zibin:Luban:1.1.8'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
